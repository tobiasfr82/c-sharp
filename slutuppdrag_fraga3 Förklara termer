Förklara följande termer

1. C#

C# är ett sekventiellt, objekt-orienterad programmeringsspråk som även är turing-komplett. 
Med turing-komplett menas det att C# kan räkna ut vilka matematiska problem som helst.
Språket lanserades år 2000 där Anders Hjelsberg haft en stor roll i dess utvecklande.

2. CIL
CIL står för Common Intermedient Language och är det språk som C# kompileras till. Dock ej till sådan binär kod
som processorn kan läsa. När programet sedan körs så kompileras det till binär kod som processorn kan läsa. 
Fördelen med detta är att det går snabbare att ladda programmet, samt att man kan köra samma program
på en 32-bitars och 64-bitars processor. Eller en processor av helt annan typ ex. en processor av typen AMD
eller intel.

Denna teknik, att mellan-kompilera programmet kallas för Just In Time, JIT-Kompilering. 

3. private
När vi pratar om private så pratar vi om Klassmedlemmars synlighet.

class MinKlass
{
  private double decimalTal;
}

Med private styr vi här synligheten för variabeln decimalTal som nu inte syns utanför den egna klassen. Den går
med andra ord inte att anropa någon annanstans ifrån än just inom klassen MinKlass. En private variabel går
däremot att påverka med metod inom klassen som i sig kan påverkas utifrån om de är satta till att göra det.

En klassmedlem, i detta fallet double decimalTal, räknas alltid som private om inget annat deklareras. För att
den skall kunna åberopas utanför klassen MinKlass måste vi sätta den till public, dvs.

class MinKlass
{
  public double decimalTal;
}

Att en klassmedlem sätts till private per automatik, om vi inte deklarerar den annorlunda, beror på att det är
fördelaktigt att ha den just privat. Detta gör att vi dels undviker problem med variabel namn som krockar
i program samt underlättar vid kodning i större projekt då olika programmerare inte behöver ta hänsyn till
varandras klassmedlemar i de fall de kodar olika klasser.

4. lista
Med en lista kan man, till skillnad från en vektor, ändra storleken på efter det att den har skapats genom att 
lägga till eller ta bort saker ur den. Den expanderar då med andra ord efter behov. Listor fungerar i övrigt ungefär
som vektorer, dock med den skillnaden att de inte kan vara multi-dimensionella.

Man skapar en lista genom att använda följande Syntax:

List<typ> identifierare = new List<typ>();

Ex. List<string> svenskaOrter = new List<string>("Malmö", "Stockholm", "Östersund");

För att lägga till värden i listan kan man antingen deklarera det inom den avslutande () och då separera dem
med ett komma-tecken ( , ) eller använda svenskaOrter.Add(Värdet att lägga till);  det är just listans 
identifierare.Add() som lägger till värdet till listan.

5. vektor
En vektor är väldigt användbar inom programmering då man vill hålla reda på många saker samtidigt.
Exempelvis kan en vektor innehålla mätdata såsom en industriel laseravläsning av ett 3-dimensionellt föremål
(så länge man kan koppla ihop avläsnings-instrumented med en 3-dimensionell vektor inläsning). Alternativt
något mer vanligt, användar inläst, mätdata som hastighetsmätningar eller dyl. 

Däremot behöver en vektor inte bara användas för att ta hand om många mätvärden. Den kan även arbeta mer "internt"
genom att exempelvis slumpgenerera en sänka-skepp spelplan eller hålla reda på de skott en artificiell motståndare
skjuter i ett spel.

En vektor kan vara multi-dimensionell, till skillnad från listor som endast är en-dimensionella. Däremot kan man inte
ändra storleken på en vektor efter att den har deklarerats.

Man skapar en vektor genom att använda följande Syntax:

typ[] identifierare = new typ[] {};

För att lägga till värden i listan kan man lägga till värdena inom {} och separera dem med ett komma-tecken ( , )

ex.

int[] antalKm = new int[] {2, 10, 25, 1, 250};

6. returvärde
Ett returvärde är det värde som en metod skickar tillbaks efter att ha utfört det som den blivit programmerad till att göra.
Detta görs genom funktionen return. Return brukar vanligtvis vara det sista som skrivs i en metod som skickar tillbaks
returvärde.

Viktigt att tänka på när man använder sig av returvärde (return) i en metod är att metoden inte kan deklareras som en void
utan måste sättas till samma typ som returneras.

ex. 

FEL!
static void minMetod(string namn)
  // Logik för metoden
  return ålder;

Här returnerar vi en ålder som i logiken skulle varit satt till typen int. Då vi deklarerat att metoden är void så har vi
sagt att den inte ska returnera ett värde vilket nu kommer orsaka ett kompileringsfel.

RÄTT
static int minMetod(string namn)
  // Logik för metoden
  return ålder;

Nu har vi bytt ut void till int och kommer därför kunna returnera variabeln ålder som är av typen int. Om din variabel är av
en annan typ så ersätter du int med din variabel typ.

Slutligen, då vi pratar om returvärde, så är det värdet på variabeln ålder som returneras i fallet ovan.

7. inparameter
En inparameter är det som vi skickar in i en metod. Det är metoden som styr vad som händer med inparametern och
oftast så returnerar metoden ett värde baserat på inparametern som vi skickat in. Ett exempel på detta är att
man skickar in Namn och Födelsedata i en metod som kontrollerar om en person är myndig och returnerar ett sant
eller falskt värde. 

Det värdet kan man sedan använda när man gör en utskrift på skärmen som berättar för användaren att personen är 
myndig.

Man använder inparameter enligt följande syntax:

static void minMetod(typ inparameternsIdentifierare)
{
  // Logiken för metoden
}

static void Main(string[] args)
{
  minMetod(inparameter);
}

ex.

static void minMetod(string namn)
{
  // Logiken för metoden
}

static void Main(string[] args)
{
  minMetod("Johan");
}

I exemplet ovan har vi manuellt satt värdet till Johan och skickar det som en inparameter till metoden minMetod där
den lagras i string variabeln namn. Innuti metoden skulle det finnas en logik för hur vi använder oss av namnet
för att få det resultat som vi vill få. 

Man kan även skicka in flera inparametrar till samma metod. Man separerar dem då med komma-tecken ( , ).

8. identifierare
Identifierare är det namn som vi döper variablers värde till för att lättare kunna veta vad de gör samt vart
vi använder dem. Det rekommenderas att man använder sig av beskrivande identifierare som underlättar förståelse
för vilket sorts värde variabeln innehåller.

syntax

typ identifierare tilldelningstecken litteralvärde termeringstecken

Ex.

int tal = 5;

I detta exempel är tal identifierare för variabeln av typen int med litteralvärde 5.

9. public
Till skillnad från private som förklarats tidigare så kan en public klassmedlem kommas åt utifrån metoden genom de
objekt som vi skapar. Vi kommer då åt objekten genom att skriva deras namn, följt av en punkt och därefter namnet på 
klassmedlemen.

Samma sak gäller även för statiska medlemmar. Men då skriver man bara namnet på klassen direkt.


10. internal
